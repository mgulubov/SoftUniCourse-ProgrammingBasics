"C is quirky, flawed, and an enormous success."
                                                Dennis M. Ritchie


Designed and created by Dennis Ritchie at AT&T Bell Labs in 1972, the “C” language is the building block of modern computer software as we know it. Nearly all programming languages that came after it, were either influenced by, or based on, “C”. “C” is a general-purpose, procedural language, meaning that it’s not object-oriented, but instead uses procedures, or subroutines, in order to operate on specific data structures. In other words, in procedural languages you break the data structures into variables and you design procedures, or step-by-step instructions, which operate on those variables, while in OOP, your goal is to find similarities between the different data structures and procedures, pack them together in an “Object” and then refer to them as a part of that “Object”. That being said, “C” provides constructs that map efficiently to machine instructions and is therefore more “close to the hardware”, than OOP languages. That “close-to-the-hardware” design, makes “C” a powerful and efficient tool for making fine adjustments to the behavior of the software, especially when it comes to memory usage, without actually having to go through the hellish nightmare that are assembly languages. Speaking of memory usage, a fine example of the difference in the level of control, between “C” and languages such as Java and C#, is the declaration of variables. In Java and C#, you simply “declare” a variable and you let the runtime-environment define how the variable will be represented in the computer memory. In “C”, however, you actually specify whether you want the variable to be saved in the heap, or in the stack memory, which really allows you to use your hardware more efficiently. On the other hand, “C” will not keep track of how you manage the variables that you declare in the heap memory, meaning that if you don’t free up the used space manually, you will get what is known as a “memory leak” and it will remain there until the system reboots.
----------------------------------------------------------------------------------------------------------------------------


“Within C++, there is a much smaller and cleaner language struggling to get out.”
                                        Bjarne Stroustrup


Developed by Bjarne Stroustrup at Bell Labs in 1983, C++ is one the most recognizable and widely-used programming languages today. The original name of the project was actually “C with Classes”, which pretty much sums up the whole idea behind its design - to be fast and efficient, but still being able to provide high-level features such as abstraction and data/procedure grouping. C++ effectively combines imperative, object-oriented and generic programming features, which is the reason why it’s prefered by most programmers, when a more “low-to-the-ground” programming is needed. On the other hand, because C++ is very closely related to standard C, it doesn’t have its own virtual machine to run on, thus the list of available C++ compilers can only be matched by the list of available C compilers. In fact, creating a standard-compliant compiler has been a long-time task, which by the way appears to be completely abandoned now, and therefore it’s important to note that if a C++ code has been compiled on a certain compiler, chances are it won’t be compatible with other compilers. This, of course, unisons with languages like Java and C#, which do have their own standard compilers, which are always the same, no matter what machine they run on.


----------------------------------------------------------------------------------------------------------------------------


“People think of security as a noun, something you go buy. In reality, it's an abstract concept like happiness. Openness is unbelievably helpful to security.”
                                James Gosling


Java was originally developed by James Gosling at Sun Microsystems and was first released in 1995. It’s an object-oriented language which implements the C and C++ languages, thus implementing much of their syntax. However, unlike C and C++, Java does not focus on low-level programming and thus has much less low-level programming capabilities. There are 5 primary principles that lie at the core of the Java language:
1. It must be "simple, object-oriented and familiar"
2. It must be "robust and secure"
3. It must be "architecture-neutral and portable"
4. It must execute with "high performance"
5. It must be "interpreted, threaded, and dynamic"
A point can be made that Java is in fact the first truly object-oriented language since, apart from the primitive data types, all of its code is written within classes. Java is also a pioneer in being a highly portable language, meaning that it can run under multiple machines, without being depended on different compilers. To achieve that, Java was designed to use an additional compilation state, thus when compiled, the code is not directly translated to machine code, but to Java bytecode instead. The Java bytecode, is then read and translated to machine code by the Java Virtual Machine, also known as JRE. There are many similarities between Java and the C# language developed by Microsoft. Many even speculate that C# was created, because of the Sun vs Microsoft lawsuit. However, even though C# was without doubt influenced by Java, over time the development of the two languages went in slightly different directions and the differences between the two, although not always obvious, are quite clear when one gets deeper into programming. Nevertheless, during the years both languages have borrowed a lot from each other and have undoubtedly made each other better in the process.


----------------------------------------------------------------------------------------------------------------------------


                “Mr Praline: 'E's not pinin'! 'E's passed on! This parrot is no more! He has ceased to be! 'E's expired and gone to meet 'is maker! 'E's a stiff! Bereft of life, 'e rests in peace! If you hadn't nailed 'im to the perch 'e'd be pushing up the daisies! 'Is metabolic processes are now 'istory! 'E's off the twig! 'E's kicked the bucket, 'e's shuffled off 'is mortal coil, run down the curtain and joined the bleedin' choir invisible!! THIS IS AN EX-PARROT!!'”
Monty Python’s “Dead Parrot” sketch


Python is… is… well, it’s just fun. It’s a general purpose, high-level, object-oriented language, or to put it short- it’s a scripting language. Python was developed by Guido van Rossum and was first released in the year 2000. How is it fun? Well, it just is. First of all, it’s not as verbal as the Java and the C# languages, meaning that it takes a lot less writing for your program to actually do something. Second, it’s syntax is very easy, well-structured and the language as a whole is unbelievably intuitive. If you spend a couple of months, dealing with nothing but Java, or C#, I guarantee you that after just 10-15 minutes with Python, you will be thinking “Wow, it actually does that by ITSELF?! THIS IS FUN!”. In any case, although everyone agrees that Python is fun and it can be used as a stress relieve, the fact remains that it’s only a scripting language. What that means is that it has more limited implementations, especially when it comes to creating applications that are meant for end-user consumption. Much like PHP, most Python projects are system-oriented and run somewhere in the background of the actual front-end application and execute tasks that are too small for big and heavy languages like C# and Java, and are not too complex and low-to-the-ground in order for a C, or C++ program to be used.


----------------------------------------------------------------------------------------------------------------------------


                                “You SHOULD NOT play in those!”
                        Chris “C-Webb” Webber on the 
Converse ‘Chuck Taylor’ basketball sneakers


The Pascal programming language was designed by Niklaus Wirth and was first published in 1970. It’s a procedural programming language from the pre-C era of computer programming. Pascal was a very innovative and interesting language for its time. A lot of people learned a lot from it and some of those people created some very great things, while being influenced by the language. A fine example is the C language. However, in the 1980 it was already considered old and inefficient. A good example for its limitations is, for instance, the inability to write a Pascal function, which accepts a String as a parameter. Ignoring everything else, this limitation alone makes creating a more complex program, a rather difficult task. For that and for many other reasons, Pascal, just like the Latin and the Ancient Greek languages, is also a dead language. And for those high-school teachers that still, to this day, teach Pascal to kids - learning Latin, or Ancient-Greek, will make those kids better programmers, than learning how to write Pascal code.